filter(str_detect(Type,"Earth observation*")) %>%
mutate(Name = gsub("[[:punct:]]", "", Name)) %>%
mutate_all(trimws) %>%
mutate(mes = gsub("[^a-zA-Z]","",date),
day = substr(date,1,2) %>% gsub(" ","",.),
year = "2020") %>%
mutate(mes = case_when(
mes =="January"~1,mes=="February" ~2,
mes == "March"~3,mes=="April"~4,
mes=="May" ~5,mes=="June" ~6,
mes=="July" ~7,mes=="August" ~8,
mes=="September" ~9,mes=="October" ~10,
mes=="November" ~11,mes=="December" ~12
)) %>%
mutate(mes = lapply(mes,two_digits),
day = lapply(day,two_digits)) %>%
mutate(date = sprintf("%s.%s.%s",mes,day,year)) %>%
mutate_all(trimws)
View(newdata)
write_csv(newdata,"2020.csv")
url <- "https://en.wikipedia.org/wiki/2021_in_spaceflight"
tablas <- read_html(url) %>%
html_table()
tablas
tablas <- read_html(url) %>%
html_table() %>%
`[`(c(4,5)) %>%
rbindlist(fill = TRUE)
colnames(tablas) <- c("date","rop","Name","Program","Launchsite1",
"Type","LSP1","type","v1")
colnames(tablas) <- c("date","rop","Name","Program","Launchsite1",
"Type","LSP1","type","v1")
colnames(tablas) <- c("date","rop","Name","Program","Launchsite1",
"Type","LSP1","type")
newdata <- tablas %>%
select(date,Name,Program,Type) %>%
`[`(-c(1:3),) %>%
drop_na() %>%
filter(str_detect(Type,"Earth observation*")) %>%
mutate(Name = gsub("[[:punct:]]", "", Name)) %>%
mutate_all(trimws) %>%
mutate(mes = gsub("[^a-zA-Z]","",date),
day = substr(date,1,2) %>% gsub(" ","",.),
year = "2020") %>%
mutate(mes = case_when(
mes =="January"~1,mes=="February" ~2,
mes == "March"~3,mes=="April"~4,
mes=="May" ~5,mes=="June" ~6,
mes=="July" ~7,mes=="August" ~8,
mes=="September" ~9,mes=="October" ~10,
mes=="November" ~11,mes=="December" ~12
)) %>%
mutate(mes = lapply(mes,two_digits),
day = lapply(day,two_digits)) %>%
mutate(date = sprintf("%s.%s.%s",mes,day,year)) %>%
mutate_all(trimws)
tablas <- read_html(url) %>%
html_table() %>%
`[`(c(4,5)) %>%
rbindlist(fill = TRUE)
View(tablas)
tablas <- read_html(url) %>%
html_table()
tablas
tablas <- read_html(url) %>%
html_table() %>%
`[`(c(5)) %>%
rbindlist(fill = TRUE)
colnames(tablas) <- c("date","rop","Name","Program","Launchsite1",
"Type","LSP1","type")
newdata <- tablas %>%
select(date,Name,Program,Type) %>%
`[`(-c(1:3),) %>%
drop_na() %>%
filter(str_detect(Type,"Earth observation*")) %>%
mutate(Name = gsub("[[:punct:]]", "", Name)) %>%
mutate_all(trimws) %>%
mutate(mes = gsub("[^a-zA-Z]","",date),
day = substr(date,1,2) %>% gsub(" ","",.),
year = "2020") %>%
mutate(mes = case_when(
mes =="January"~1,mes=="February" ~2,
mes == "March"~3,mes=="April"~4,
mes=="May" ~5,mes=="June" ~6,
mes=="July" ~7,mes=="August" ~8,
mes=="September" ~9,mes=="October" ~10,
mes=="November" ~11,mes=="December" ~12
)) %>%
mutate(mes = lapply(mes,two_digits),
day = lapply(day,two_digits)) %>%
mutate(date = sprintf("%s.%s.%s",mes,day,year)) %>%
mutate_all(trimws)
colnames(tablas) <- c("date","rop","Name","Program","Launchsite1",
"Type","LSP1","type","v1","v2")
colnames(tablas) <- c("date","rop","Name","Program","Launchsite1",
"Type","LSP1","type")
View(tablas)
tablas <- read_html(url) %>%
html_table() %>%
`[`(c(4)) %>%
rbindlist(fill = TRUE)
tablas
View(tablas)
tablas
url <- "https://en.wikipedia.org/wiki/2021_in_spaceflight"
tablas <- read_html(url)
tablas
tablas <- read_html(url) %>%
html_table()
tablas
styler:::style_selection()
library(tidyverse)
library(cptcity)
# Packages
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize(drive=TRUE)
# Function for remove cloud and shadows ------------------------------------------
getQABits <- function(image, qa) {
# Convert decimal (character) to decimal (little endian)
qa <- sum(2^(which(rev(unlist(strsplit(as.character(qa), "")) == 1))-1))
# Return a single band image of the extracted QA bits, giving the qa value.
image$bitwiseAnd(qa)$lt(1)
}
s2_clean <- function(img) {
# Select NDVI
img_band_selected <- img$select("NDVI")
# quality band
ndvi_qa <- img$select("QA60")
# Select pixels to mask
quality_mask <- getQABits(ndvi_qa, "110000000000")
# Mask pixels with value zero.
img_band_selected$updateMask(quality_mask)
}
# Define a Region of interest
roi <-ee$Geometry$Point(-52.19032,-30.25413)$buffer(500)
# Sentinel-2 MSI dataset into the Earth Engine’s public data archive ------------
s2 <- ee$ImageCollection("COPERNICUS/S2_SR")
# Select S2 images ---------------------------------------------------------------
s2_roi  <- s2$
filterBounds(roi)$
filter(ee$Filter$lte("CLOUDY_PIXEL_PERCENTAGE", 1))$
filter(ee$Filter$date(as.character(as.Date("2019-12-04")), as.character(as.Date("2020-05-03"))))$
map(s2_clean)
s2_roi_add_area <- s2_roi$map(
function(img) {
img$set("area", img$clip(roi)$geometry()$area())
}
)
area
# Get the dates and IDs of the selected images ------------------------------------
area <- floor(ee_utils_py_to_r(roi$area(maxError=1)$getInfo()))
area
ic_date_gt_area <- s2_roi_add_area$filterMetadata("area", "greater_than", area)
ic_date_gt_area
nimages <- ic_date_gt_area$size()$getInfo()
nimages
nimages
ic_date_gt_area <- s2_roi_add_area$filterMetadata("area", "greater_than", area)
nimages <- ic_date_gt_area$size()$getInfo()
# Function for remove cloud and shadows ------------------------------------------
getQABits <- function(image, qa) {
# Convert decimal (character) to decimal (little endian)
qa <- sum(2^(which(rev(unlist(strsplit(as.character(qa), "")) == 1))-1))
# Return a single band image of the extracted QA bits, giving the qa value.
image$bitwiseAnd(qa)$lt(1)
}
s2_clean <- function(img) {
# Select NDVI
img_band_selected <- img$select("NDVI")
# quality band
ndvi_qa <- img$select("QA60")
# Select pixels to mask
quality_mask <- getQABits(ndvi_qa, "110000000000")
# Mask pixels with value zero.
img_band_selected$updateMask(quality_mask)
}
# Define a Region of interest
roi <-ee$Geometry$Point(-52.19032,-30.25413)$buffer(500)
# Sentinel-2 MSI dataset into the Earth Engine’s public data archive ------------
s2 <- ee$ImageCollection("COPERNICUS/S2_SR")
# Select S2 images ---------------------------------------------------------------
s2_roi  <- s2$
filterBounds(roi)$
filter(ee$Filter$lte("CLOUDY_PIXEL_PERCENTAGE", 1))$
filter(ee$Filter$date(as.character(as.Date("2019-12-04")), as.character(as.Date("2020-05-03"))))$
map(s2_clean)
s2_roi_add_area <- s2_roi$map(
function(img) {
img$set("area", img$clip(roi)$geometry()$area())
}
)
# Get the dates and IDs of the selected images ------------------------------------
area <- floor(ee_utils_py_to_r(roi$area(maxError=1)$getInfo()))
ic_date_gt_area <- s2_roi_add_area$filterMetadata("area", "greater_than", area)
nimages <- ic_date_gt_area$size()$getInfo()
ee_draw_geometry <- function(name, import_as = "geo",properties = list(name="roi") ,color = "red",zoom = 5,...){
require(mapedit)
if(import_as == "geo"){
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
} else if(import_as =="fea"){
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_feature <- ee$Feature(ee_object,properties)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
} else{
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_feature <- ee$FeatureCollection(ee_object,properties)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
}
assign(name,ee_object,envir = .GlobalEnv)
return(ee_output)
}
library(rgee)
library(tidyverse)
ee_Initialize()
ee_Initialize()
library(rgee)
library(tidyverse)
ee_Initialize()
ee_draw_geometry <- function(name, import_as = "geo",properties = list(name="roi") ,color = "red",zoom = 5,...){
require(mapedit)
if(import_as == "geo"){
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
} else if(import_as =="fea"){
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_feature <- ee$Feature(ee_object,properties)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
} else{
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_feature <- ee$FeatureCollection(ee_object,properties)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
}
assign(name,ee_object,envir = .GlobalEnv)
return(ee_output)
}
ee_draw_geometry(
name = "my_roi"
)
my_roi
dem <- ee$Image("CGIAR/SRTM90_V4")
ee_draw_geometry <- function(name, import_as = "geo",properties = NULL ,color = "red", zoom = 5,...){
require(mapedit)
if(import_as == "geo"){
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
} else if(import_as =="fea"){
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_feature <- ee$Feature(ee_object,properties)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
} else{
ee_object <- editMap() %>% sf_as_ee()
Map$centerObject(ee_object,zoom = zoom)
ee_feature <- ee$FeatureCollection(ee_object,properties)
ee_output <- Map$addLayer(
eeObject = ee_object, visParams = list(color = color, width = 8)
)
}
assign(name,ee_object,envir = .GlobalEnv)
return(ee_output)
}
ee_draw_geometry(
name = "my_roi"
)
my_roi
dem <- ee$Image("CGIAR/SRTM90_V4")
ee_edit_draw_on_im <- function(name, im, fea, zoom = 5,viz=NULL,...){
ee_to_sf <- fea %>% ee_as_sf()
ee_new_sf <- im %>%
Map$addLayer(visParams = viz) %>%
editFeatures(x = ee_to_sf)
ee_new_ee <- sf_as_ee(ee_new_sf)
ee_object <- img$clip(ee_new_ee)
ee_output <- Map$addLayer(
eeObject = ee_object,viz,...)
assign(name,ee_object,envir = .GlobalEnv)
return(ee_output)
}
ee_edit_draw_on_im <- function(name, im, fea, zoom = 5,viz=NULL,...){
ee_to_sf <- fea %>% ee_as_sf()
ee_new_sf <- im %>%
Map$addLayer(visParams = viz) %>%
editFeatures(x = ee_to_sf)
ee_new_ee <- sf_as_ee(ee_new_sf)
ee_object <- img$clip(ee_new_ee)
ee_output <- Map$addLayer(
eeObject = ee_object,viz,...)
assign(name,ee_object,envir = .GlobalEnv)
return(ee_output)
}
library(cptcity)
viz <- list(min = 500,
max = 6500,
palette = cpt("grass_elevation")
)
ee_edit_draw_on_im(name = "roi",im = dem,fea = my_roi,viz = viz)
ee_draw_geometry(
name = "my_roi"
)
ee_draw_geometry(
name = "my_roi"
)
# install.packages("remotes")
remotes::install_github("paleolimbot/qgisprocess")
library(qgisprocess)
qgis_version()
qgis_algorithms()
qgis_description()
qgis_configure()
install.packages("bookdown")
bookdown::bs4_book_theme()
library(rgee)
library(rgeeExtra)
library(tidyverse)
library(cptcity)
ee_Initialize()
# 1. Study area -----------------------------------------------------------
ica <- ee$Geometry$Rectangle(
c(-75.9080,-14.3925,-75.4355,-13.8784),
geodesic = FALSE,
proj = "EPSG:4326"
)
# 2. Dataset --------------------------------------------------------------
# Scaling factors
scaling_img <- function(image) {
opticalBands = image$select('SR_B.')$multiply(0.0000275)$add(-0.2)
thermalBands = image$select('ST_B.*')$multiply(0.00341802)$add(149.0)
image$addBands(opticalBands, NULL, TRUE)$
addBands(thermalBands, NULL, TRUE)
}
# Landsat 9 scaled
l9 <- ee$Image('LANDSAT/LC09/C02/T1_L2/LC09_006070_20220202')$
clip(ica) %>%
scaling_img()
# 3. Visualization of color false and ndvi --------------------------------
viz_ndvi <- list(
min = -0.5,
max = 0.5,
palette = cpt("grass_ndvi")
)
viz <- list(
min = 0.07,
max = 0.37,
bands = c("SR_B5","SR_B4","SR_B3")
)
Map$centerObject(ica)
m1 <- Map$addLayer(
(l9[[5]] - l9[[4]])/(l9[[5]] + l9[[4]]),
visParams = viz_ndvi) +
Map$addLegend(
visParams = viz_ndvi
)
m2 <- Map$addLayer(
l9,
visParams = viz
)
m2 | m1
library(htmlwidgets)
f = m2 | m1
saveWidget(f, "a.html")
library(rgee)
ee_Initialize()
JRC_yearly <- ee$ImageCollection("JRC/GSW1_3/YearlyHistory")
JRC_yearly |> ee_print()
JRC_yearly |> ee_print()
JRC_yearly |> ee_get_date_ic()
JRC_yearly | > ee_print()
JRC_yearly |> ee_print()
setwd("~/Vídeos/ee-cptcity/sssss/ee-cptcity")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
blogdown::serve_site()
setwd("~/Vídeos/ee-cptcity/sssss/ee-cptcity")
pkgdown::build_site()
setwd("~/Vídeos/ee-cptcity")
setwd("~/Vídeos/ee-cptcity/ee-cptcity/resources")
path <- "top-palettes/"
list.gpf <- list.files(
path = path,
pattern = ".gpf$",
recursive = TRUE
)
library(tidyverse)
library(rjson)
path <- "top-palettes/"
list.gpf <- list.files(
path = path,
pattern = ".gpf$",
recursive = TRUE
)
name_color <- list.gpf %>%
gsub(".gpf", "", .) %>%
gsub("-", "_", .) %>%
gsub("/", "_", .)  %>%
gsub("top_palletes_", "", .)
name_color
library(tidyverse)
df = name_color %>%
as_tibble()
df
df = name_color %>%
as_tibble() %>%
separate(value,into = c("Categories","Name"),sep = "_")
df
df = name_color %>%
as_tibble() %>%
separate(value,into = c("Categories","Name"),sep = "_")
View(df)
df = name_color %>%
as_tibble()
df
name_color <- list.gpf %>%
gsub(".gpf", "", .) %>%
gsub("-", "_", .) %>%
gsub("/", "_", .)  %>%
gsub("top_palletes_", "", .)
name_color
list.gpf
df = name_color %>%
as_tibble() %>%
str_split(pattern = "_")
df
list.gpf <- list.files(
path = path,
pattern = ".gpf$",
recursive = TRUE
)
name_color <- list.gpf %>%
gsub(".gpf", "", .) %>%
gsub("-", "_", .) %>%
gsub("/", "_", .)  %>%
gsub("top_palletes_", "", .)
name_color %>%
as_tibble() %>%
str_split(pattern = "_")
df = name_color %>%
as_tibble()
df
View(df)
df = name_color %>%
as_tibble() %>%
df = name_color %>%
as_tibble() %>%
separate_rows(to_expand, second, sep = '_')
df = name_color %>%
as_tibble() %>%
separate_rows(sep = '_')
df
df = name_color %>%
as_tibble() %>%
separate_rows(sep = '_')
df
df = name_color %>%
as_tibble()
df
View(df)
write_csv("all_palettes.csv")
write_csv(df,"all_palettes.csv")
